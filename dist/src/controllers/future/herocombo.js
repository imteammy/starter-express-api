let{ComboHero:e}=require("@models"),{nc:t}=require("@config/node"),s=300;exports.getAll=async(s,a,n)=>{let r=t.get("AllCombo");if(r)return a.json(r);try{let t=await e.find({});return 0===t.length?{message:"Heroes is empty."}:t}catch(o){return o.message}},exports.getID=async(t,s,a)=>{let{id:n}=t.body;try{let t=await e.find({_id:n});return 0===t.length?{message:"Combo not found!"}:s.json(t)}catch(r){return s.send(r.message)}},exports.create=async(t,s,a)=>{let n=t.body;delete n.token;try{let t=await e.create(n);return s.json({message:"Created Hero combo success.",data:t})}catch(r){return s.status(400).json({message:r.message})}},exports.update=async(t,s,a)=>{let n=t.body;delete n.token;try{let t={_id:n.id},a=Object.assign({},n),r=await e.findOneAndUpdate(t,a,{"new":!0});return 0===r.length?s.status(404).json({message:"Hero not found."}):s.json({message:"Hero updated successfully.",data:r})}catch(r){return s.status(400).json({message:r.message})}},exports.remove=async(t,s,a)=>{let{id:n}=t.body;try{let t=await e.findOneAndDelete({_id:n});return 0===t.length?s.status(404).json({message:"Hero not found."}):s.json({message:"Hero deleted successfully.",data:t})}catch(r){return s.status(400).json({message:r.message})}};