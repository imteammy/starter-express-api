let e=e=>require(e),s=e("express"),t=e("mongoose"),a=e("node-cache"),o=e("cors"),n=s(),m=new a,r=(n.use(o()),n.use(s.json()),n.use(s.urlencoded({extended:!0})),3e3),l=r||4e3,c=300,i="mongodb+srv://peerawat:YDCOyOKDb1LEyUV8@nodedev.fgnykzv.mongodb.net/ROV",d={type:String,"default":"null"},u=async(e,s,t)=>{if((e=e.body.token)||s.status(401).json({error:"Token is required"}),"12345"!==e)return s.status(401).json({error:"Invalid token!"});t()},g=async()=>{await t.connect(i,{useNewUrlParser:!0,useUnifiedTopology:!0,connectTimeoutMS:3e4}).then((()=>{console.log("> MongoDB connected")}))["catch"]((e=>{console.error(e.message)}))},f=(g(),(e,s)=>{m.flushAll(),s.status(200).json({message:"Cleared!"})}),h={name:d,image:d,effect:d,cooldown:d},w={name:d,image:d,price:d},p={name:d,image:d,total:d},y={name:d,image:d,effect:d},j={name:d,image:d},b=new t.Schema({name:d,story:d,image:d,role:{main:d,sub:d},passiveSkill:h,firstSkill:h,secondSkill:h,ultimateSkill:h,items:{one:w,two:w,three:w,four:w,five:w,six:w},roons:{one:p,two:p,three:p},challengerSkills:{name:d,image:d,effect:d},LatensSkills:{one:{one:y,two:y,three:y},two:{one:y,two:y},three:{one:y,two:y}},comboHero:{one:j,two:j,three:j,four:j,five:j}}),S={name:d,image:d},v={one:S,two:S,three:S,four:S,five:S},k=new t.Schema({comboName:d,comboImage:d,heroCombo:v,comboLost:v,itemsSolution:v,comboWin:v}),C={name:d,image:d},O=new t.Schema({teamName:d,teamImage:d,team:{one:C,two:C,three:C,four:C,five:C}}),I=new t.Schema({name:d,image:d,effect:d,itemPassive:d,cooldown:d,cost:d}),D=new t.Schema({name:d,color:d,image:d,effect:d}),T=new t.Schema({name:d,image:d,effect:d,cooldown:d}),q=new t.Schema({name:d,image:d,effect:d,color:d}),A=new t.Schema({image:d}),L=t.model("Items",I),U=t.model("Hero",b),x=t.model("Roons",D),H=t.model("ComboHero",k),M=t.model("LatensSkills",q),N=t.model("ChallengerSkills",T),$=t.model("Tierlist",A),_=t.model("Teamhero",O),E=e=>{switch(e){case"hero":return U;case"items":return L;case"challengers":return N;case"roons":return x;case"tierlist":return $;case"herocombos":return H;case"latens":return M;case"teams":return _;default:return null}},P=e=>{if(!e||null===e)throw new Error("Invalid request parameters")},R=async(e,s)=>{let t=e.params.models;e=await E(t);try{await P(e);var a=m.get(t);if(a)return s.status(200).json(a);await e.find({}).then((e=>e&&null!==e?(console.log(e),m.set(t,e,c),s.status(200).json(e)):s.status(200).json({message:t+" is empty."})))["catch"]((e=>s.status(500).json({message:"Invalid request parameters"})))}catch(e){}},V=async(e,s)=>{let t=e.params.models;var a=await E(t);P(a);let o=e.body.id;if(e=m.get(o))return s.json(e);await a.findOne({_id:o}).then((e=>e&&0!==e.lenght?(m.set(o,e),s.status(200).json(e)):s.json({message:t+" not found!"})))["catch"]((e=>s.status(500).json({message:e.message})))},z=async(e,s)=>{let t=e.params.models;var a=await E(t);delete(e=(P(a),e.body)).token,await a.create(e).then((e=>s.status(200).json({message:`Create ${t} success.`,data:e})))["catch"]((e=>s.status(500).json({message:e.message})))},B=async(e,s)=>{let t=e.params.models;var a=await E(t);delete(e=(P(a),e.body)).token,e=e.map((e=>{const{token:s,...t}=e;return t}));await a.insertMany(e).then((e=>s.status(200).json({message:`Create many ${t} successfully.`,data:e})))["catch"]((e=>s.status(500).json({message:e.message})))},K=async(e,s)=>{let t=e.params.models;var a=await E(t);delete(e=(P(a),e.body)).token;let o={_id:e.id},n=Object.assign({},e);if(e=m.get(o))return s.json(e);await a.findOneAndUpdate(o,n,{"new":!0}).then((e=>e?(m.set(o,n,c),s.status(200).json({message:t+" updated success.",data:e})):(e={message:t+" not found for update."},m.set(o,e,c),s.status(200).json(e))))["catch"]((e=>s.status(500).json({message:e.message})))},W=async(e,s)=>{let t=e.params.models;var a=await E(t);P(a);let o=e.body.id;if(e=m.get(o))return s.json(e);await a.findOneAndDelete({_id:o}).then((e=>e&&null!==e?s.status(200).json({message:`Delete ${t} success.`,data:e}):(e={message:t+" not found for delete."},m.set(o,e,c),s.status(200).json(e))))["catch"]((e=>s.status(500).json({message:e.message})))};n.get("/:models",R),n.post("/:models/id",u,V),n.post("/:models/add",u,z),n.post("/:models/addmany",u,B),n.post("/:models/update",u,K),n.put("/:models/update",u,K),n.post("/:models/delete",u,W),n["delete"]("/:models/delete",u,W),n.post("/clear",f),n.listen(l,(()=>{console.log("App listening at http://localhost:"+l)}));